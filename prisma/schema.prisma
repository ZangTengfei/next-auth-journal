generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
}

model Seller {
  id        Int     @id @default(autoincrement())
  name      String
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  purchaseOrders PurchaseOrder[]
}

model GoodsCategory {
  id        Int     @id @default(autoincrement())
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  purchaseOrderItems PurchaseOrderItem[]
}

model PurchaseOrder {
  id        Int     @id @default(autoincrement())
  operator  User    @relation(fields: [operatorId], references: [id])
  operatorId Int
  seller    Seller  @relation(fields: [sellerId], references: [id])
  sellerId  Int
  paid      Boolean @default(false)
  total_fee Float
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id        Int     @id @default(autoincrement())
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int
  goodsCategory GoodsCategory @relation(fields: [goodsCategoryId], references: [id])
  goodsCategoryId Int
  grossWeight Float
  tareWeight Float
  netWeight Float
  customPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  purchaseOrders PurchaseOrder[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
